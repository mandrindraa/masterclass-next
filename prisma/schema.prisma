// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  studentProfile Student?
  teacherProfile Teacher?

  @@map("users")
}

model Student {
  id           String   @id @default(cuid())
  userId       String   @unique
  studentId    String   @unique
  grade        String
  dateOfBirth  DateTime?
  address      String?
  phone        String?
  parentEmail  String?
  parentPhone  String?
  enrollmentDate DateTime @default(now())
  status       StudentStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]
  grades       Grade[]
  attendance   Attendance[]
  reportCards  ReportCard[]

  @@map("students")
}

model Teacher {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeId   String   @unique
  department   String
  qualification String?
  experience   Int?
  salary       Float?
  hireDate     DateTime @default(now())
  status       TeacherStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses      Course[]
  grades       Grade[]
  attendance   Attendance[]

  @@map("teachers")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  credits     Int      @default(3)
  semester    String
  year        Int
  maxStudents Int      @default(30)
  teacherId   String
  classroomId String?
  status      CourseStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  enrollments Enrollment[]
  grades      Grade[]
  notes       Note[]
  attendance  Attendance[]

  @@map("courses")
}

model Classroom {
  id        String   @id @default(cuid())
  name      String   @unique
  building  String
  floor     Int?
  capacity  Int
  equipment String?
  status    ClassroomStatus @default(AVAILABLE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses   Course[]

  @@map("classrooms")
}

model Enrollment {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  enrolledAt DateTime @default(now())
  status     EnrollmentStatus @default(ENROLLED)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Grade {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  teacherId  String
  assignment String
  points     Float
  maxPoints  Float
  percentage Float
  letterGrade String
  gradedAt   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher    Teacher @relation(fields: [teacherId], references: [id])

  @@map("grades")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  teacherId String
  date      DateTime
  status    AttendanceStatus
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@unique([studentId, courseId, date])
  @@map("attendance")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  courseId  String
  type      NoteType @default(LECTURE)
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model ReportCard {
  id         String   @id @default(cuid())
  studentId  String
  semester   String
  year       Int
  gpa        Float
  totalCredits Int
  attendance Float
  comments   String?
  generatedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, semester, year])
  @@map("report_cards")
}

// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  RETIRED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum ClassroomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum EnrollmentStatus {
  ENROLLED
  DROPPED
  COMPLETED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum NoteType {
  LECTURE
  ASSIGNMENT
  STUDY_GUIDE
  ANNOUNCEMENT
}
